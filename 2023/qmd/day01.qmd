---
title: "Advent of code 2023, Day 01"
author: "Hendrik Wagenseil (HW), Tim Appelhans (TA)"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false

library(reticulate)
use_virtualenv(
  file.path(
    here::here()
    , ".venv"
  )
)

knitr::opts_knit$set(
  root.dir = '~/Documents/repos/github/adventofcode'
)

y = "2023"
d = "01"

ifl = file.path(here::here(), y, "data", paste0("day", d, "input"))
txt = readLines(ifl)
```


::: {.panel-tabset}

## Part I

Extract first and last digit from each element of a vector of strings and 
sum up. 

```{r}
head(txt, n = 12L)
```

::: {.panel-tabset}

#### R (HW)

```{r}
l = gregexpr("[[:digit:]]", text = txt) |> 
  lapply(FUN = range) 

mapply(
  \(t, f){
    paste0(
      substr(t, f[1], f[1])
      , substr(t, f[2], f[2])
    ) |> 
      as.numeric()
  }
  , t = txt
  , f = l
  , SIMPLIFY = FALSE
) |> 
  unname() |> 
  unlist() |> 
  sum(na.rm = TRUE)
```

#### R (TA)

#### Python (HW)

```{python}
def getdigits(x: str):
  digit = [i for i in x if i.isdigit()]
  digit = digit[0] + digit[-1]
  return int(digit)

sum([getdigits(i) for i in r.txt])
```

:::


## Part II

Extract first and last digit and/or first and last written number from each 
element of a vector of strings and sum up. 

```{r}
head(txt, n = 12L)
```

::: {.panel-tabset}

#### R (HW)

```{r}
pat = c(
  "one", "two", "three"
  , "four", "five", "six"
  , "seven", "eight", "nine"
)

new = pat 
substr(
  new
  , start = 2
  , stop = 2
) = as.character(1:9)

txt_digits = Map(
  stringi::stri_replace_all_fixed
  , str = txt
  , pattern = list(pat)
  , replacement = list(new)
  , vectorize_all = FALSE
) |> 
  unlist() |> 
  unname()

l = gregexpr("[[:digit:]]", text = txt_digits) |> 
  lapply(FUN = range) 

mapply(
  \(t, f){
    paste0(
      substr(t, f[1], f[1])
      , substr(t, f[2], f[2])
    ) |> 
      as.numeric()
  }
  , t = txt_digits
  , f = l
  , SIMPLIFY = FALSE
) |> 
  unname() |> 
  unlist() |> 
  sum(na.rm = TRUE)
```

#### Python (HW)

```{python}
fromto = {
  'one': 'o1e'
  , 'two': 't2o'
  , 'three': 't3ree'
  , 'four': 'f4ur'
  , 'five': 'f5ve'
  , 'six': 's6x'
  , 'seven': 's7ven'
  , 'eight': 'e8ght'
  , 'nine': 'n9ne'
}

def digitstring2digit(x: str, dic: dict):
  for i, k in enumerate(dic):
    x = x.replace(k, dic[k])
  return x

def getdigits(x: str):
  digit = [i for i in x if i.isdigit()]
  digit = digit[0] + digit[-1]
  return int(digit)

txt_digits = [digitstring2digit(i, fromto) for i in r.txt]    

sum([getdigits(i) for i in txt_digits])
```

:::

:::
