{
  "hash": "f2b77f470df66c5fdd6fc808cd7a7aff",
  "result": {
    "markdown": "---\ntitle: \"2022 - day 01\"\nauthor: \"Hendrik Wagenseil\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n## Data \n\nLoad and preview the data set. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ny = \"2022\"\nd = \"01\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\nhead(txt, n = 30L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"4456\"  \"15332\" \"15148\" \"8795\"  \"11382\" \"\"      \"9808\"  \"8430\"  \"8486\" \n[10] \"18918\" \"\"      \"57935\" \"\"      \"1604\"  \"3015\"  \"4529\"  \"4862\"  \"1822\" \n[19] \"4297\"  \"2568\"  \"3263\"  \"3011\"  \"2127\"  \"5186\"  \"1947\"  \"5816\"  \"4255\" \n[28] \"4041\"  \"\"      \"35216\"\n```\n:::\n:::\n\n\n## Part I\n\nAggregate the calories per elf and get the maximum number of calories per elf.\n\n::: {.panel-tabset}\n\n#### R \n\nApproach:  \n\n* create a vector of indices for the empty string\n* create vector of start and end indices of each elf\n* create list `cal` with subsets per elf\n* convert all strings per element of `cal` to integer and sum up \n* get the maximum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nempty = which(txt == \"\")\nfrom = c(1L, empty + 1L)\nto = c(empty - 1L, length(txt))\n\ncal = mapply(\n  \\(f, t) txt[f:t]\n  , f = from\n  , t = to\n) |> \n  lapply(as.integer) |> \n  lapply(sum) |> \n  unlist() \n\nmax(cal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 72478\n```\n:::\n:::\n\n\n#### Python \n\nApproach:  \n\n* create an empty list `elf` \n* create an integer `cal` which defaults to 0\n* loop over the string list\n  * if $i$th element is not an empty string, add the value to `cal`\n  * if $i$th element is an empty string, append `cal` to `elf` and reset `cal` \n* get the maximum of the result\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntxt = r.txt\n\nelf = []\ncal = 0\n\nfor i in range(len(txt)):\n  if txt[i] != '':\n    cal = cal + int(txt[i])\n  else:\n    elf.append(cal)\n    cal = 0\n\nmax(elf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n72478\n```\n:::\n:::\n\n\n:::\n\n\n## Part II\n\n\n::: {.panel-tabset}\n\n#### R \n\nApproach:  \n\n* sort vector `cal` in decreasing order\n* select first three elements and sum up\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncal = cal[order(cal, decreasing = TRUE)]\nsum(cal[1:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 210367\n```\n:::\n:::\n\n\n#### Python \n\n\n::: {.cell}\n\n```{.python .cell-code}\nelf.sort(reverse = True)\nsum(elf[0:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n210367\n```\n:::\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}