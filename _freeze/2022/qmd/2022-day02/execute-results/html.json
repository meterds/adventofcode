{
  "hash": "1206bc7272f727e6824f112b6009a03b",
  "result": {
    "markdown": "---\ntitle: \"2022 - day 02\"\nauthor: \"Hendrik Wagenseil\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n## Data \n\nLoad and preview the data set. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ny = \"2022\"\nd = \"02\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\nhead(txt, n = 30L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"C Z\" \"A Y\" \"C Z\" \"A Y\" \"C Y\" \"A Z\" \"B Y\" \"C X\" \"A Y\" \"B X\" \"B X\" \"A Y\"\n[13] \"C Z\" \"C Y\" \"C Y\" \"A Y\" \"C Y\" \"B X\" \"B X\" \"A Z\" \"C Y\" \"B Z\" \"C Z\" \"A Z\"\n[25] \"B Y\" \"A Y\" \"C Z\" \"A Z\" \"A Y\" \"C Z\"\n```\n:::\n:::\n\n\n## Part I\n\nGet the score of the rock paper scissors game.\n\n* A = rock, B = paper, C = scissors\n* X = rock, Y = paper, Z = scissors\n\n::: {.panel-tabset}\n\n#### R \n\nApproach:  \n\n* define a named vector `pts` with all possible combinations and the \nresulting score\n* match `txt` with `pts` to get the score for all games and sum up\n\n\n::: {.cell}\n\n```{.r .cell-code}\npts = c(\n  \"A X\" = 1 + 3\n  , \"A Y\" = 2 + 6\n  , \"A Z\" = 3 + 0\n  , \"B X\" = 1 + 0\n  , \"B Y\" = 2 + 3\n  , \"B Z\" = 3 + 6\n  , \"C X\" = 1 + 6\n  , \"C Y\" = 2 + 0\n  , \"C Z\" = 3 + 3\n)\n\nscore = pts[match(txt, table = names(pts))]\nsum(score)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12586\n```\n:::\n:::\n\n\n#### Python \n\nApproach:  \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntxt = r.txt\n\npts = {\n  'A X': 1 + 3\n  , 'A Y': 2 + 6\n  , 'A Z': 3 + 0\n  , 'B X': 1 + 0\n  , 'B Y': 2 + 3\n  , 'B Z': 3 + 6\n  , 'C X': 1 + 6\n  , 'C Y': 2 + 0\n  , 'C Z': 3 + 3\n}\n\nscore = [pts[i] for i in txt]\nsum(score)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n12586\n```\n:::\n:::\n\n\n:::\n\n\n## Part II\n\nGet the score of the rock paper scissors game.\n\n* A = rock, B = paper, C = scissors\n* X = loose, Y = draw, Z = win\n\n::: {.panel-tabset}\n\n#### R \n\nApproach:  \n\n* same as in part I, just re-define vector `pts` \n\n\n::: {.cell}\n\n```{.r .cell-code}\npts = c(\n  \"A X\" = 3 + 0\n  , \"A Y\" = 1 + 3\n  , \"A Z\" = 2 + 6\n  , \"B X\" = 1 + 0\n  , \"B Y\" = 2 + 3\n  , \"B Z\" = 3 + 6\n  , \"C X\" = 2 + 0\n  , \"C Y\" = 3 + 3\n  , \"C Z\" = 1 + 6\n)\n\nscore = pts[match(txt, table = names(pts))]\nsum(score)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13193\n```\n:::\n:::\n\n\n#### Python \n\nApproach:  \n\n* same as in part I, just re-define vector `pts` \n\n\n::: {.cell}\n\n```{.python .cell-code}\ntxt = r.txt\n\npts = {\n  'A X': 3 + 0\n  , 'A Y': 1 + 3\n  , 'A Z': 2 + 6\n  , 'B X': 1 + 0\n  , 'B Y': 2 + 3\n  , 'B Z': 3 + 6\n  , 'C X': 2 + 0\n  , 'C Y': 3 + 3\n  , 'C Z': 1 + 6\n}\n\nscore = [pts[i] for i in txt]\nsum(score)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n13193\n```\n:::\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}