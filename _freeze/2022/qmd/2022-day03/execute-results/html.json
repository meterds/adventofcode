{
  "hash": "402a24b47b42312825ced24323aaa230",
  "result": {
    "markdown": "---\ntitle: \"2022 - day 03\"\nauthor: \"Hendrik Wagenseil\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n## Data \n\nLoad and preview the data set. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ny = \"2022\"\nd = \"03\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\nhead(txt, n = 20L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"PnJJfVPBcfVnnPnBFFcggttrtgCrjDtSjzSS\"            \n [2] \"llWlLbmmdLLwLbqGdmTmbZfCQtzrMQfrjSzrtSrMqgMt\"    \n [3] \"sHlZTsWZwGGlZmGTmdlZbhJNRPphVfRvVnRBsRsJJV\"      \n [4] \"fsHtVbjtqstBghhwwPBw\"                            \n [5] \"SDQzzSzQrQMmmQlmlcNcJLZPgLrVZTdCddhgdPwwCw\"      \n [6] \"JmSWSVGGlJJbRsbpWHfbRj\"                          \n [7] \"tJndRtwtddPvllvfrldrfPpHWDgglFDWWmMmHWmHpZlS\"    \n [8] \"BBJTTjCsJWZCmSHSZD\"                              \n [9] \"LhqLcVzshTNjhqhcjLLTLjbTnGndfdwrfPRVRrdnwftQwJRv\"\n[10] \"wHlPJZwbbZfqbFwqFZfrrcrJrtMWSMMVtVcJht\"          \n[11] \"NzzzNBjNfLzvGfDNjMhVhrrMShLchsRVLs\"              \n[12] \"DDdmmgBGDNdgfgZggnZbZHln\"                        \n[13] \"jqNjZJqsGsRqJJqnlJJGzMzffcffTCfQcFmvcWfvTNfcvv\"  \n[14] \"PdhVdrwphhVtDdSPLmFCWTLFWWTfFQQr\"                \n[15] \"dSPwbbVdbpQllZMQbMjM\"                            \n[16] \"QQdfflqvjTvfZqLMWfNDGhwsCNGGGM\"                  \n[17] \"rzRRRTVTPTNhsDWDRhGC\"                            \n[18] \"gHSTpTnppvjQgJjcql\"                              \n[19] \"nzNvsFBBBFsNrnNBrvndfThwDbhVPzVVwhZZChpZPCbZ\"    \n[20] \"GMQQStmcHHmlfMtPwbZVVVVhhPhbVc\"                  \n```\n:::\n:::\n\n\n## Part I\n\nFind items (letters) occuring in the first and second half of a string, rank by \nposition in the alphabet (1-26 for lowercase letters, 27-52 for uppercase \nletters) and calculate the sum.\n\n::: {.panel-tabset}\n\n#### R \n\nApproach:  \n\n* split strings into first (`c1`) and second half (`c2`)\n* split each half into single letters\n* intersect first and half pairwise\n* match with alphabet and calculate sum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlen = nchar(txt) \n\nc1 = substr(txt, start = 1L, stop = len / 2L)\nc2 = substr(txt, start = len / 2L + 1L, stop = len)\n\nc1 = strsplit(c1, split = \"\")\nc2 = strsplit(c2, split = \"\")\n\nitems = Map(\n  intersect\n  , x = c1\n  , y = c2\n) |> \n  unlist() \n\nscore = match(\n  items\n  , table = c(letters, LETTERS)\n)\n\nsum(score)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7875\n```\n:::\n:::\n\n\n#### Python \n\nApproach:  \n\n* split strings into first (`c1`) and second half (`c2`)\n* intersect first and half pairwise\n* get unicode code point for uppercase and lowercase letters, use a \ndifferent offset to get correct scores\n* calculate sum\n\n\n::: {.cell}\n\n```{.python .cell-code}\nc1 = [i[:int(len(i)/2)] for i in r.txt]\nc2 = [i[int(len(i)/2):] for i in r.txt]\n\nitems = []\nfor i1, i2 in zip(c1, c2):\n  i = set(i1) & set(i2)\n  items.append(list(i)[0])\n\nl = [ord(i) - 96 for i in items if i.islower()]\nu = [ord(i) - 65 + 27 for i in items if i.isupper()]\nsum(l + u)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7875\n```\n:::\n:::\n\n\n:::\n\n\n## Part II\n\n::: {.panel-tabset}\n\n#### R \n\nApproach:  \n\n* arrange rucksacks in groups of 3\n* per group, unify items per rucksack and then calculate group frequency\n* identify item with frequency of 3\n* match with alphabet and calculate sum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfrom = seq.int(1L, to = length(txt), by = 3L)\nto = seq.int(3L, to = length(txt), by = 3L)\n\ngrp = mapply(\n  \\(f, t) txt[f:t]\n  , f = from\n  , t = to\n  , SIMPLIFY = FALSE\n)\n\nstick = lapply(\n  grp\n  , FUN = \\(g){\n    s = strsplit(g, split = \"\") |> \n      lapply(FUN = unique) |> \n      unlist() |> \n      table()\n    names(s)[which(s == 3)]\n  }\n) |> \n  unlist()\n\nscore = match(\n  stick\n  , table = c(letters, LETTERS)\n)\n\nsum(score)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2479\n```\n:::\n:::\n\n\n#### Python \n\nApproach:  \n\n\n\n::: {.cell}\n\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}