{
  "hash": "a95bba779511e2824c8b227aa2635fc2",
  "result": {
    "markdown": "---\ntitle: \"Day 01\"\nauthor: \"Hendrik Wagenseil\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n## Data \n\nLoad and preview the data set. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ny = \"2023\"\nd = \"01\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\n\nhead(txt, n = 12L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"nine92jnhgqzctpgbcbpz\"             \"sevensddvc73three\"                \n [3] \"9986fmfqhdmq8\"                     \"7onexmxbzllfqb\"                   \n [5] \"six777\"                            \"1zbngsixxrfrpr\"                   \n [7] \"threeeight9seven\"                  \"nhds975three6\"                    \n [9] \"ninepgp9\"                          \"22fourninetzfourfsnxjglthreeeight\"\n[11] \"mhcvqmsg7bdj\"                      \"seven67\"                          \n```\n:::\n:::\n\n\n## Part I\n\nFor each element in the given vector of characters do:  \n\n* extract the first and the last digit \n* concatenate to a new number\n* calculate the sum  \n\n::: {.panel-tabset}\n\n#### R \n\nApproach:  \n\n* get indices of all digits per element using `gregexpr`\n* get the first and last digit using `range`\n* extract the first and last digits using `substtr`\n* create the new number and calculate the sum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl = gregexpr(\"[[:digit:]]\", text = txt) |> \n  lapply(FUN = range) \n\nmapply(\n  \\(t, f){\n    paste0(\n      substr(t, f[1], f[1])\n      , substr(t, f[2], f[2])\n    ) |> \n      as.numeric()\n  }\n  , t = txt\n  , f = l\n  , SIMPLIFY = FALSE\n) |> \n  unname() |> \n  unlist() |> \n  sum(na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 54601\n```\n:::\n:::\n\n\n#### Python \n\nApproach:  \n\n* extract all digits from a string using list comprehension\n* get the first and last digit by index and concatenate\n* calculate the sum\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef getdigits(x: str):\n  digit = [i for i in x if i.isdigit()]\n  digit = digit[0] + digit[-1]\n  return int(digit)\n\nsum([getdigits(i) for i in r.txt])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n54601\n```\n:::\n:::\n\n\n:::\n\n\n## Part II\n\nThe task is the same as in part I, but in addition to digits, also written \nnumbers (one, two, three, ...) shall be considered.\n\n::: {.panel-tabset}\n\n#### R \n\nApproach:  \n\n* replace the second character of any written numbers with their digit (e.g. \n`one` -> `o1e`, `two` -> `t2o`, ...) \n* replacing the entire string would cause issues in case of adjacent written \nnumbers like `oneight`, `sevenine`\n* apply the approach from part I\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfromto = c(\n  'one' = 'o1e'\n  , 'two' = 't2o'\n  , 'three' = 't3ree'\n  , 'four' = 'f4ur'\n  , 'five' = 'f5ve'\n  , 'six' = 's6x'\n  , 'seven' = 's7ven'\n  , 'eight' = 'e8ght'\n  , 'nine' = 'n9ne'\n)\n\ntxt_digits = Map(\n  stringi::stri_replace_all_fixed\n  , str = txt\n  , pattern = list(names(fromto))\n  , replacement = list(fromto)\n  , vectorize_all = FALSE\n) |> \n  unlist() |> \n  unname()\n\nl = gregexpr(\"[[:digit:]]\", text = txt_digits) |> \n  lapply(FUN = range) \n\nmapply(\n  \\(t, f){\n    paste0(\n      substr(t, f[1], f[1])\n      , substr(t, f[2], f[2])\n    ) |> \n      as.numeric()\n  }\n  , t = txt_digits\n  , f = l\n  , SIMPLIFY = FALSE\n) |> \n  unname() |> \n  unlist() |> \n  sum(na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 54078\n```\n:::\n:::\n\n\n#### Python \n\n\n::: {.cell}\n\n```{.python .cell-code}\nfromto = {\n  'one': 'o1e'\n  , 'two': 't2o'\n  , 'three': 't3ree'\n  , 'four': 'f4ur'\n  , 'five': 'f5ve'\n  , 'six': 's6x'\n  , 'seven': 's7ven'\n  , 'eight': 'e8ght'\n  , 'nine': 'n9ne'\n}\n\ndef digitstring2digit(x: str, dic: dict):\n  for i, k in enumerate(dic):\n    x = x.replace(k, dic[k])\n  return x\n\ntxt_digits = [digitstring2digit(i, fromto) for i in r.txt]    \n\nsum([getdigits(i) for i in txt_digits])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n54078\n```\n:::\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}