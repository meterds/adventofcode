{
  "hash": "909e1279321f347301a81ff2f7766461",
  "result": {
    "markdown": "---\ntitle: \"2023 - day 16\"\nauthor: \"Hendrik Wagenseil\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(txt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"\\\\........-.........\\\\................................|..................-.............\\\\../......-..............\" \n[2] \"........|....\\\\.../...-...............\\\\.........\\\\...........-......-.......\\\\...../.....................-.../...\"\n[3] \".......--.......|.-..-..........................\\\\....../..../........-............/.........|........|........\"   \n[4] \".................................../.........................|....|.....\\\\............./..........|...../..\\\\\\\\..\" \n[5] \".........\\\\................|..../.........................................-......|........................|....\"   \n[6] \".|............-....|.....-.....|...............-.............-....................................\\\\...........\"   \n```\n:::\n:::\n\n\n\n::: {.panel-tabset}\n\n## Part I\n\nDetermine number of energized cells.\n\n::: {.panel-tabset}\n\n#### R \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# txt |> sapply(nchar) |> unname()\n# gsub(\"\\\\\\\\\", \"%%\", x = txt) |> sapply(nchar) |> unname()\n\ngetcell = function(\n    row\n    , col\n    , lines = txt\n){\n  \n  if (!(row %in% 1:length(txt) & col %in% 1:nchar(lines[1]))){\n    s = NA_character_\n  } else {\n    s = substr(lines[row], start = col, stop = col)\n  }\n  \n  return(s)\n  \n}\n\ngetcell(0, 1)\ngetcell(5, 1120)\ngetcell(1, 1)\ngetcell(1, 2)\ngetcell(1, 10)\n\n\nnextcells = function(\n    x\n    , y\n    , from = c(\"l\", \"r\", \"t\", \"b\")\n){\n  \n  from = match.arg(from)\n  type = getcell(x, col = y)\n  \n  if (type == \".\"){\n    if (from == \"l\") n = c(x, y + 1L)\n    else if (from == \"r\") n = c(x, y - 1L)\n    else if (from == \"t\") n = c(x + 1L, y)\n    else if (from == \"b\") n = c(x - 1L, y)\n  } else if (type == \"/\"){\n    if (from == \"l\") n = c(x - 1L, y)\n    else if (from == \"r\") n = c(x + 1L, y)\n    else if (from == \"t\") n = c(x, y - 1L)\n    else if (from == \"b\") n = c(x, y + 1L)\n  } else if (type == \"\\\\\"){\n    if (from == \"l\") n = c(x + 1L, y)\n    else if (from == \"r\") n = c(x - 1L, y)\n    else if (from == \"t\") n = c(x, y + 1L)\n    else if (from == \"b\") n = c(x, y - 1L)\n  } else if (type == \"-\"){\n    if (from == \"l\") n = c(x, y + 1L)\n    else if (from == \"r\") n = c(x, y - 1L)\n    else if (from == \"t\") n = c(x, y + 1L, x, y - 1L)\n    else if (from == \"b\") n = c(x, y + 1L, x, y - 1L)\n  } else if (type == \"|\"){\n    if (from == \"l\") n = c(x + 1L, y, x - 1L, y)\n    else if (from == \"r\") n = c(x + 1L, y, x - 1L, y)\n    else if (from == \"t\") n = c(x + 1L, y)\n    else if (from == \"b\") n = c(x - 1L, y)\n  }\n  \n  n = matrix(n, ncol = 2L, byrow = TRUE)\n  \n  idx = apply(\n    n\n    , MARGIN = 2L\n    , FUN = \\(i) which(i == 0)\n  ) |> \n    unlist()\n  \n  if (length(idx) > 0L) n = n[-idx, , drop = FALSE]\n  return(n)\n  \n}\n\nm = matrix(nrow = 0L, ncol = 2L)\ncolnames(m) = c(\"row\", \"col\")\n\nn = matrix(c(1L, 1L), ncol = 2L, byrow = TRUE)\ncolnames(n) = c(\"row\", \"col\")\n\nwhile (dim(n)[1] > 0L){\n  \n  m = rbind(m, n)\n  \n  for (i in 1:dim(n)[1]){\n    n = nextcells(n[i, ])\n  }\n  \n}\nrbind(\n  m\n  , nextcells(m[])\n)\n\ntxt[1]\nx = 1\ny = 10\nfrom = \"r\"\ngetcell(x, y)\n\nnextcells(1, y = 1, from = \"l\")\nnextcells(1, y = 1, from = \"r\")\nnextcells(1, y = 10, from = \"l\")\nnextcells(1, y = 10, from = \"r\")\nnextcells(1, y = 10, from = \"b\")\nnextcells(1, y = 53, from = \"r\")\nnextcells(1, y = 53, from = \"t\")\nnextcells(1, y = 53, from = \"b\")\nnextcells(1, y = 53, from = \"l\")\n```\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n\n## Part II\n\nAdd $m$ successive cards where $m$ is the number of matches in a card.\nGet the final number of cards.\n\n::: {.panel-tabset}\n\n#### R\n\n\n::: {.cell}\n\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}