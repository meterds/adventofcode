{
  "hash": "61276cca317d13ed4ca2ed4cc84dcd2e",
  "result": {
    "markdown": "---\ntitle: \"Day 01\"\nauthor: \"Hendrik Wagenseil (HW), Tim Appelhans (TA)\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\nDataset: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ny = \"2023\"\nd = \"01\"\n\nifl = file.path(here::here(), y, \"data\", paste0(\"day\", d, \"input\"))\ntxt = readLines(ifl)\n\nhead(txt, n = 12L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"nine92jnhgqzctpgbcbpz\"             \"sevensddvc73three\"                \n [3] \"9986fmfqhdmq8\"                     \"7onexmxbzllfqb\"                   \n [5] \"six777\"                            \"1zbngsixxrfrpr\"                   \n [7] \"threeeight9seven\"                  \"nhds975three6\"                    \n [9] \"ninepgp9\"                          \"22fourninetzfourfsnxjglthreeeight\"\n[11] \"mhcvqmsg7bdj\"                      \"seven67\"                          \n```\n:::\n:::\n\n\n::: {.panel-tabset}\n\n## Part I\n\nExtract first and last digit from each element of a vector of strings and \nsum up. \n\n::: {.panel-tabset}\n\n#### R (HW)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl = gregexpr(\"[[:digit:]]\", text = txt) |> \n  lapply(FUN = range) \n\nmapply(\n  \\(t, f){\n    paste0(\n      substr(t, f[1], f[1])\n      , substr(t, f[2], f[2])\n    ) |> \n      as.numeric()\n  }\n  , t = txt\n  , f = l\n  , SIMPLIFY = FALSE\n) |> \n  unname() |> \n  unlist() |> \n  sum(na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 54601\n```\n:::\n:::\n\n\n#### Python (HW)\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef getdigits(x: str):\n  digit = [i for i in x if i.isdigit()]\n  digit = digit[0] + digit[-1]\n  return int(digit)\n\nsum([getdigits(i) for i in r.txt])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n54601\n```\n:::\n:::\n\n\n:::\n\n\n## Part II\n\nExtract first and last digit and/or first and last written number from each \nelement of a vector of strings and sum up. \n\n::: {.panel-tabset}\n\n#### R (HW)\n\n\n::: {.cell}\n\n```{.r .cell-code}\npat = c(\n  \"one\", \"two\", \"three\"\n  , \"four\", \"five\", \"six\"\n  , \"seven\", \"eight\", \"nine\"\n)\n\nnew = pat \nsubstr(\n  new\n  , start = 2\n  , stop = 2\n) = as.character(1:9)\n\ntxt_digits = Map(\n  stringi::stri_replace_all_fixed\n  , str = txt\n  , pattern = list(pat)\n  , replacement = list(new)\n  , vectorize_all = FALSE\n) |> \n  unlist() |> \n  unname()\n\nl = gregexpr(\"[[:digit:]]\", text = txt_digits) |> \n  lapply(FUN = range) \n\nmapply(\n  \\(t, f){\n    paste0(\n      substr(t, f[1], f[1])\n      , substr(t, f[2], f[2])\n    ) |> \n      as.numeric()\n  }\n  , t = txt_digits\n  , f = l\n  , SIMPLIFY = FALSE\n) |> \n  unname() |> \n  unlist() |> \n  sum(na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 54078\n```\n:::\n:::\n\n\n#### Python (HW)\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfromto = {\n  'one': 'o1e'\n  , 'two': 't2o'\n  , 'three': 't3ree'\n  , 'four': 'f4ur'\n  , 'five': 'f5ve'\n  , 'six': 's6x'\n  , 'seven': 's7ven'\n  , 'eight': 'e8ght'\n  , 'nine': 'n9ne'\n}\n\ndef digitstring2digit(x: str, dic: dict):\n  for i, k in enumerate(dic):\n    x = x.replace(k, dic[k])\n  return x\n\ndef getdigits(x: str):\n  digit = [i for i in x if i.isdigit()]\n  digit = digit[0] + digit[-1]\n  return int(digit)\n\ntxt_digits = [digitstring2digit(i, fromto) for i in r.txt]    \n\nsum([getdigits(i) for i in txt_digits])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n54078\n```\n:::\n:::\n\n\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}