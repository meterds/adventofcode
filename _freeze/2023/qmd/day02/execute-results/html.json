{
  "hash": "68b5ef91508fe30f3ae67414c30de7bb",
  "result": {
    "markdown": "---\ntitle: \"Day 02\"\nauthor: \"Hendrik Wagenseil\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n## Data \n\nLoad and preview the data set. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ny = \"2023\"\nd = \"02\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(\"day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\nhead(txt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Game 1: 1 green, 2 blue; 15 blue, 12 red, 2 green; 4 red, 6 blue; 10 blue, 8 red; 3 red, 12 blue; 1 green, 12 red, 8 blue\"     \n[2] \"Game 2: 5 green, 2 red, 18 blue; 18 blue, 6 red, 9 green; 6 blue, 3 green; 6 green, 1 red, 9 blue; 19 blue, 2 green, 6 red\"    \n[3] \"Game 3: 16 red, 10 green; 12 red, 6 blue, 9 green; 10 green, 5 blue; 10 green, 16 red; 5 red, 8 green, 8 blue\"                 \n[4] \"Game 4: 9 blue, 20 green; 1 red, 3 blue, 10 green; 7 blue, 18 green; 4 blue, 20 green; 8 blue, 1 green, 1 red; 1 green\"        \n[5] \"Game 5: 3 green, 8 red; 1 blue, 10 red; 6 red, 4 green; 8 red, 1 blue, 3 green; 1 blue, 4 green, 3 red; 1 green, 1 blue, 4 red\"\n[6] \"Game 6: 7 green, 15 red, 11 blue; 2 red, 12 blue; 11 red, 11 green\"                                                            \n```\n:::\n:::\n\n\n## Part I\n\nColored cubes (red, green, blue) are drawn from a bag with replacement. Several \niterations compose a game. The task is to identify all games being possible if \nthe bag contained \n\n* 12 red cubes\n* 13 green cubes\n* 14 blue cubes\n\nThe solution is the sum of the ids of these games.\n\nOverall, the iterations per game do not matter here. The problem simplifies to \nidentify games where the number of cubes drawn in a particular color exceeds \nthe given amount of cubes in this color.\n\n::: {.panel-tabset}\n\n#### R\n\nApproach:\n\n* replace the prefix \"Game X: \" from every vector element as the game id is \nequal to the index\n* split the game into single cubes \n* get the maximum number of cubes per colors and per game\n* identify games where the maximum number of cubes in at least one color \nexceeds the given amount of cubes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsplitgame = function(\n    x\n){\n\n  x = gsub(\"^.*?:\", replacement = \"\", x = x)\n  unlist(\n    strsplit(x, split = \";|,\")\n  )\n  \n}\n\nmaxcubes = function(\n    x\n    , colors = c(\"red\", \"green\", \"blue\")\n){\n  \n  vapply(\n    colors\n    , FUN = \\(c){\n      v = grep(c, x = x, value = TRUE)\n      v = gsub(c, replacement = \"\", x = v)\n      v = trimws(v)\n      max(0L, as.integer(v))\n    }\n    , FUN.VALUE = integer(1L)\n  )\n  \n}  \n\ngames = Map(\n  splitgame\n  , x = txt\n) |> \n  unname()\n\ncubes = Map(\n  maxcubes\n  , x = games\n)\n\npossible = lapply(\n  cubes\n  , FUN = \\(i){\n    all(i <= c(12, 13, 14))\n  }\n) |> \n  unlist() \n\nsum(which(possible))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2913\n```\n:::\n:::\n\n\n#### Python\n\nApproach:\n\n* split each game into single cubes, drop prefix \"Game X:\"\n* get the maximum number of cubes per colors and per game\n* identify games where the maximum number of cubes in at least one color \nexceeds the given amount of cubes\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport re\nimport numpy as np\n\ndef maxcubes(x: str):\n  x = re.split(',|;|:', x)[1:]\n  cbs = []\n  for col in ['red', 'green', 'blue']:\n    c = [int(g.replace(col, '')) for g in x if col in g]\n    cbs.append(max(c))\n  return cbs  \n\ncubes = map(maxcubes, r.txt)\ncubes = list(cubes)\ncubes = np.array(cubes)\n\nidx = 0\nfor i, x in enumerate(cubes):\n  if all(cubes[i] <= np.array([12, 13, 14])):\n    idx += i + 1\n  \nidx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2913\n```\n:::\n:::\n\n\n:::\n\n\n## Part II\n\nPer game, determine the minimum number of cubes per color required to play that \ngame. Calculate the power of the game, i.e. multiply the numbers of the \nminimum set. \n\n::: {.panel-tabset}\n\n#### R\n\nApproach:\n\n* interim step of part I was a list containing the maximum number of cubes per \ncolor in a given game\n* per game, multiply the elements per game and calculate the sum \n\n\n::: {.cell}\n\n```{.r .cell-code}\npow = Map(\n  prod\n  , ... = cubes\n) |>\n  unlist() \n\nsum(pow)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55593\n```\n:::\n:::\n\n\n#### Python\n\nApproach:\n\n* interim step of part I was a numpy array containing the maximum number of \ncubes per color in a given game\n* calculate the product of the array along dimension 1 (rows) and calculate the \nsum \n\n\n::: {.cell}\n\n```{.python .cell-code}\npow = np.prod(cubes, axis = 1)\nsum(pow)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n55593\n```\n:::\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}