{
  "hash": "ded735fe239c1ecd7e502a7ffc4e71d4",
  "result": {
    "markdown": "---\ntitle: \"Advent of code 2023, Day 04\"\nauthor: \"Hendrik Wagenseil (HW), Tim Appelhans (TA)\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(txt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Card   1: 44 22 11 15 37 50  3 90 60 34 | 35 60 76  3 21 84 45 52 15 72 13 31 90  6 37 44 34 53 68 22 50 38 67 11 55\"\n[2] \"Card   2: 42 14 40 24 51 49 47 73 34 74 | 40 22 48 65 34 81 24 97 14 49  1 98 66 42 71 74 28 11 47  3 45 63 73 51 87\"\n[3] \"Card   3: 16 48 80 51 41 87 46 77 23  8 | 10 77 41 46  8 36 85 16 87 27 97 13 15 35 45 80 63 37 29 60 48 51 82 61 23\"\n[4] \"Card   4: 82 88 65 64 33 89 23 49 11 92 | 11 33 91 15 81 44 29 27 63 23  1 13 74 89 88  8 37 22 51 92 65  7 49 82 64\"\n[5] \"Card   5: 36 61 30 42 64 45 80 26 84 60 | 50 46 76  4 12 32 38 23 36 45 44 61 53 94 37 33 11 82 84 87 26 19 93 15 98\"\n[6] \"Card   6: 75 63 86 49 17 26 59 70 18 57 | 87  3  2 47 65 21 24 74 28 17 34 33 16 29 63 14 60 95 83 15 41 70 56 49 23\"\n```\n:::\n:::\n\n\n\n::: {.panel-tabset}\n\n## Part I\n\nCount the number of winning cards $w$ and return a score $s$, defined as \n$$s=\\begin{cases}\n0, \\text{ if } w = 0 \\\\\n2^{w-1}, \\text{ if } w > 0 \n\\end{cases}$$\n\n::: {.panel-tabset}\n\n#### R (HW)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatches = function(x){\n  \n  spl = strsplit(x, split = \"\\\\|\")[[1]]\n  pairs = lapply(\n    1:2\n    , FUN = \\(i){\n      strsplit(spl[i], split = \" \")[[1]] |> \n        as.integer() |> \n        na.omit()\n    }\n  )\n  \n  sum(pairs[[2]] %in% pairs[[1]])\n  \n}\n\ntxt = gsub(\"^.*?:\", \"\", txt) \n\nm = Map(\n  matches\n  , x = txt\n) |> \n  unname() |> \n  unlist() \n\nsum(2^(m[m>0] -1L))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21105\n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n\n## Part II\n\nAdd $m$ successive cards where $m$ is the number of matches in a card.\nGet the final number of cards.\n\n::: {.panel-tabset}\n\n#### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmove = function(\n    x\n    , deck\n){\n  if (x > 0){\n    idx = as.integer(names(x))\n    from = min(length(deck), idx + 1L)\n    to = min(length(deck), idx + x)\n    deck[from:to]\n  }\n}\n\nplay = function(\n    game\n    , deck\n){\n\n  i = 0L\n  \n  # while (length(game) > 0L){\n  #   new = move(game[1L], deck = deck)\n  #   game = c(game[-1L], new)\n  #   i = i + 1L\n  #   print(i)\n  # } \n  \n  return(i)\n  \n  # if (length(game) > 0L){\n  #   new = move(game[1L], deck = deck)\n  #   game = c(game[-1L], new)\n  #   play(game, deck = deck)\n  # } else {\n  #   return(idx)\n  # }\n    \n}\n\nnames(m) = 1:length(m)\nnames(deck) = 1:length(m)\nplay(m[1], deck = m)\ngame = m[1:2]\n\n\naddcards = function(x, org){\n  \n  lapply(\n    1:length(x)\n    , FUN = \\(i){\n      i = 1\n      if (x[i] > 0) {\n        idx = as.integer(names(x[i]))\n        org[(idx+1):(idx+org[idx])]\n      }\n    }\n  ) |> \n    unlist()\n  \n  if (length(x) > 0){\n    return(addcards(x, org = org))\n  } else {\n    return(c(org, x))\n  }\n  \n}\n\nnames(m) = 1:length(m)\norg = m\nx = m\naddcards(m, org = m)\n```\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n:::\n",
    "supporting": [
      "day04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}