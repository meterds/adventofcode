[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Solutions to Advent of code by Eric Wastl.\n\n\n\nvia GIPHY"
  },
  {
    "objectID": "2023/qmd/2023-day09.html",
    "href": "2023/qmd/2023-day09.html",
    "title": "2023 - day 09",
    "section": "",
    "text": "head(txt)\n\n[1] \"13 9 1 2 50 233 728 1871 4300 9258 19218 39107 78571 155948 304911 585118 1098671 2014751 3605471 6296784 10739208\"       \n[2] \"16 39 84 173 354 719 1433 2795 5379 10350 20134 39782 79679 160823 324893 652941 1299026 2548741 4917680 9311783 17280520\"\n[3] \"0 14 39 74 117 165 221 322 616 1545 4242 11327 28389 66554 146616 305124 602288 1130037 2015139 3405883 5420809\"          \n[4] \"6 14 26 55 130 298 626 1203 2142 3582 5690 8663 12730 18154 25234 34307 45750 59982 77466 98711 124274\"                   \n[5] \"15 27 57 112 193 306 501 952 2094 4836 10868 23071 46018 86517 154090 261201 422937 655705 974331 1386730 1885055\"        \n[6] \"4 12 28 52 84 124 172 228 292 364 444 532 628 732 844 964 1092 1228 1372 1524 1684\"                                       \n\n\n\nPart IPart II\n\n\nContinue series of numbers by differencing. Add one more element and submit sum of these extrapolated values.\n\nRPython\n\n\n\nlapply(\n  txt\n  , FUN = \\(i){\n    # i = txt[1]\n    l = strsplit(i, split = \" \")[[1]] |&gt; \n      as.integer() |&gt; \n      list()\n    \n    while (sum(abs(l[[1]])) &gt; 0L){\n      l = c(list(diff(l[[1]])), l)\n    }\n\n    incr = integer(length(l))\n    incr[1] = 0\n    \n    for (k in seq_along(l)){\n      l[[k]] = c(l[[k]], l[[k]][length(l[[k]])] + incr[k])\n      incr[k + 1] = l[[k]][length(l[[k]])]\n    }\n    \n    l[[length(l)]][length(l[[length(l)]])]\n     \n  }\n  \n) |&gt; \n  unlist() |&gt; \n  sum()\n\n[1] 1987402313\n\n\n\n\n\n\n\n\n\n\nAdd \\(m\\) successive cards where \\(m\\) is the number of matches in a card. Get the final number of cards.\n\nRPython"
  },
  {
    "objectID": "2023/qmd/2023-day04.html",
    "href": "2023/qmd/2023-day04.html",
    "title": "2023 - day 04",
    "section": "",
    "text": "head(txt)\n\n[1] \"Card   1: 44 22 11 15 37 50  3 90 60 34 | 35 60 76  3 21 84 45 52 15 72 13 31 90  6 37 44 34 53 68 22 50 38 67 11 55\"\n[2] \"Card   2: 42 14 40 24 51 49 47 73 34 74 | 40 22 48 65 34 81 24 97 14 49  1 98 66 42 71 74 28 11 47  3 45 63 73 51 87\"\n[3] \"Card   3: 16 48 80 51 41 87 46 77 23  8 | 10 77 41 46  8 36 85 16 87 27 97 13 15 35 45 80 63 37 29 60 48 51 82 61 23\"\n[4] \"Card   4: 82 88 65 64 33 89 23 49 11 92 | 11 33 91 15 81 44 29 27 63 23  1 13 74 89 88  8 37 22 51 92 65  7 49 82 64\"\n[5] \"Card   5: 36 61 30 42 64 45 80 26 84 60 | 50 46 76  4 12 32 38 23 36 45 44 61 53 94 37 33 11 82 84 87 26 19 93 15 98\"\n[6] \"Card   6: 75 63 86 49 17 26 59 70 18 57 | 87  3  2 47 65 21 24 74 28 17 34 33 16 29 63 14 60 95 83 15 41 70 56 49 23\"\n\n\n\nPart IPart II\n\n\nCount the number of winning cards \\(w\\) and return a score \\(s\\), defined as \\[s=\\begin{cases}\n0, \\text{ if } w = 0 \\\\\n2^{w-1}, \\text{ if } w &gt; 0\n\\end{cases}\\]\n\nRPython\n\n\n\nmatches = function(x){\n  \n  spl = strsplit(x, split = \"\\\\|\")[[1]]\n  pairs = lapply(\n    1:2\n    , FUN = \\(i){\n      strsplit(spl[i], split = \" \")[[1]] |&gt; \n        as.integer() |&gt; \n        na.omit()\n    }\n  )\n  \n  sum(pairs[[2]] %in% pairs[[1]])\n  \n}\n\ntxt = gsub(\"^.*?:\", \"\", txt) \n\nm = Map(\n  matches\n  , x = txt\n) |&gt; \n  unname() |&gt; \n  unlist() \n\nsum(2^(m[m&gt;0] -1L))\n\n[1] 21105\n\n\n\n\n\n\n\n\n\n\nAdd \\(m\\) successive cards where \\(m\\) is the number of matches in a card. Get the final number of cards.\n\nRPython\n\n\n\nmove = function(\n    x\n    , deck\n){\n  if (x &gt; 0){\n    idx = as.integer(names(x))\n    from = min(length(deck), idx + 1L)\n    to = min(length(deck), idx + x)\n    deck[from:to]\n  }\n}\n\nplay = function(\n    game\n    , deck\n){\n\n  i = 0L\n  \n  # while (length(game) &gt; 0L){\n  #   new = move(game[1L], deck = deck)\n  #   game = c(game[-1L], new)\n  #   i = i + 1L\n  #   print(i)\n  # } \n  \n  return(i)\n  \n  # if (length(game) &gt; 0L){\n  #   new = move(game[1L], deck = deck)\n  #   game = c(game[-1L], new)\n  #   play(game, deck = deck)\n  # } else {\n  #   return(idx)\n  # }\n    \n}\n\nnames(m) = 1:length(m)\nnames(deck) = 1:length(m)\nplay(m[1], deck = m)\ngame = m[1:2]\n\n\naddcards = function(x, org){\n  \n  lapply(\n    1:length(x)\n    , FUN = \\(i){\n      i = 1\n      if (x[i] &gt; 0) {\n        idx = as.integer(names(x[i]))\n        org[(idx+1):(idx+org[idx])]\n      }\n    }\n  ) |&gt; \n    unlist()\n  \n  if (length(x) &gt; 0){\n    return(addcards(x, org = org))\n  } else {\n    return(c(org, x))\n  }\n  \n}\n\nnames(m) = 1:length(m)\norg = m\nx = m\naddcards(m, org = m)"
  },
  {
    "objectID": "2023/qmd/2023-day02.html",
    "href": "2023/qmd/2023-day02.html",
    "title": "Day 02",
    "section": "",
    "text": "Load and preview the data set.\n\ny = \"2023\"\nd = \"02\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\nhead(txt)\n\n[1] \"Game 1: 1 green, 2 blue; 15 blue, 12 red, 2 green; 4 red, 6 blue; 10 blue, 8 red; 3 red, 12 blue; 1 green, 12 red, 8 blue\"     \n[2] \"Game 2: 5 green, 2 red, 18 blue; 18 blue, 6 red, 9 green; 6 blue, 3 green; 6 green, 1 red, 9 blue; 19 blue, 2 green, 6 red\"    \n[3] \"Game 3: 16 red, 10 green; 12 red, 6 blue, 9 green; 10 green, 5 blue; 10 green, 16 red; 5 red, 8 green, 8 blue\"                 \n[4] \"Game 4: 9 blue, 20 green; 1 red, 3 blue, 10 green; 7 blue, 18 green; 4 blue, 20 green; 8 blue, 1 green, 1 red; 1 green\"        \n[5] \"Game 5: 3 green, 8 red; 1 blue, 10 red; 6 red, 4 green; 8 red, 1 blue, 3 green; 1 blue, 4 green, 3 red; 1 green, 1 blue, 4 red\"\n[6] \"Game 6: 7 green, 15 red, 11 blue; 2 red, 12 blue; 11 red, 11 green\""
  },
  {
    "objectID": "2023/qmd/2023-day02.html#data",
    "href": "2023/qmd/2023-day02.html#data",
    "title": "Day 02",
    "section": "",
    "text": "Load and preview the data set.\n\ny = \"2023\"\nd = \"02\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\nhead(txt)\n\n[1] \"Game 1: 1 green, 2 blue; 15 blue, 12 red, 2 green; 4 red, 6 blue; 10 blue, 8 red; 3 red, 12 blue; 1 green, 12 red, 8 blue\"     \n[2] \"Game 2: 5 green, 2 red, 18 blue; 18 blue, 6 red, 9 green; 6 blue, 3 green; 6 green, 1 red, 9 blue; 19 blue, 2 green, 6 red\"    \n[3] \"Game 3: 16 red, 10 green; 12 red, 6 blue, 9 green; 10 green, 5 blue; 10 green, 16 red; 5 red, 8 green, 8 blue\"                 \n[4] \"Game 4: 9 blue, 20 green; 1 red, 3 blue, 10 green; 7 blue, 18 green; 4 blue, 20 green; 8 blue, 1 green, 1 red; 1 green\"        \n[5] \"Game 5: 3 green, 8 red; 1 blue, 10 red; 6 red, 4 green; 8 red, 1 blue, 3 green; 1 blue, 4 green, 3 red; 1 green, 1 blue, 4 red\"\n[6] \"Game 6: 7 green, 15 red, 11 blue; 2 red, 12 blue; 11 red, 11 green\""
  },
  {
    "objectID": "2023/qmd/2023-day02.html#part-i",
    "href": "2023/qmd/2023-day02.html#part-i",
    "title": "Day 02",
    "section": "Part I",
    "text": "Part I\nColored cubes (red, green, blue) are drawn from a bag with replacement. Several iterations compose a game. The task is to identify all games being possible if the bag contained\n\n12 red cubes\n13 green cubes\n14 blue cubes\n\nThe solution is the sum of the ids of these games.\nOverall, the iterations per game do not matter here. The problem simplifies to identify games where the number of cubes drawn in a particular color exceeds the given amount of cubes in this color.\n\nRPython\n\n\nApproach:\n\nreplace the prefix “Game X:” from every vector element as the game id is equal to the index\nsplit the game into single cubes\nget the maximum number of cubes per colors and per game\nidentify games where the maximum number of cubes in at least one color exceeds the given amount of cubes\n\n\nsplitgame = function(\n    x\n){\n\n  x = gsub(\"^.*?:\", replacement = \"\", x = x)\n  unlist(\n    strsplit(x, split = \";|,\")\n  )\n  \n}\n\nmaxcubes = function(\n    x\n    , colors = c(\"red\", \"green\", \"blue\")\n){\n  \n  vapply(\n    colors\n    , FUN = \\(c){\n      v = grep(c, x = x, value = TRUE)\n      v = gsub(c, replacement = \"\", x = v)\n      v = trimws(v)\n      max(0L, as.integer(v))\n    }\n    , FUN.VALUE = integer(1L)\n  )\n  \n}  \n\ngames = Map(\n  splitgame\n  , x = txt\n) |&gt; \n  unname()\n\ncubes = Map(\n  maxcubes\n  , x = games\n)\n\npossible = lapply(\n  cubes\n  , FUN = \\(i){\n    all(i &lt;= c(12, 13, 14))\n  }\n) |&gt; \n  unlist() \n\nsum(which(possible))\n\n[1] 2913\n\n\n\n\nApproach:\n\nsplit each game into single cubes, drop prefix “Game X:”\nget the maximum number of cubes per colors and per game\nidentify games where the maximum number of cubes in at least one color exceeds the given amount of cubes\n\n\nimport re\nimport numpy as np\n\ndef maxcubes(x: str):\n  x = re.split(',|;|:', x)[1:]\n  cbs = []\n  for col in ['red', 'green', 'blue']:\n    c = [int(g.replace(col, '')) for g in x if col in g]\n    cbs.append(max(c))\n  return cbs  \n\ncubes = map(maxcubes, r.txt)\ncubes = list(cubes)\ncubes = np.array(cubes)\n\nidx = 0\nfor i, x in enumerate(cubes):\n  if all(cubes[i] &lt;= np.array([12, 13, 14])):\n    idx += i + 1\n  \nidx\n\n2913"
  },
  {
    "objectID": "2023/qmd/2023-day02.html#part-ii",
    "href": "2023/qmd/2023-day02.html#part-ii",
    "title": "Day 02",
    "section": "Part II",
    "text": "Part II\nPer game, determine the minimum number of cubes per color required to play that game. Calculate the power of the game, i.e. multiply the numbers of the minimum set.\n\nRPython\n\n\nApproach:\n\ninterim step of part I was a list containing the maximum number of cubes per color in a given game\nper game, multiply the elements per game and calculate the sum\n\n\npow = Map(\n  prod\n  , ... = cubes\n) |&gt;\n  unlist() \n\nsum(pow)\n\n[1] 55593\n\n\n\n\nApproach:\n\ninterim step of part I was a numpy array containing the maximum number of cubes per color in a given game\ncalculate the product of the array along dimension 1 (rows) and calculate the sum\n\n\npow = np.prod(cubes, axis = 1)\nsum(pow)\n\n55593"
  },
  {
    "objectID": "2022/qmd/2022-day03.html",
    "href": "2022/qmd/2022-day03.html",
    "title": "2022 - day 03",
    "section": "",
    "text": "Load and preview the data set.\n\ny = \"2022\"\nd = \"03\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\nhead(txt, n = 20L)\n\n [1] \"PnJJfVPBcfVnnPnBFFcggttrtgCrjDtSjzSS\"            \n [2] \"llWlLbmmdLLwLbqGdmTmbZfCQtzrMQfrjSzrtSrMqgMt\"    \n [3] \"sHlZTsWZwGGlZmGTmdlZbhJNRPphVfRvVnRBsRsJJV\"      \n [4] \"fsHtVbjtqstBghhwwPBw\"                            \n [5] \"SDQzzSzQrQMmmQlmlcNcJLZPgLrVZTdCddhgdPwwCw\"      \n [6] \"JmSWSVGGlJJbRsbpWHfbRj\"                          \n [7] \"tJndRtwtddPvllvfrldrfPpHWDgglFDWWmMmHWmHpZlS\"    \n [8] \"BBJTTjCsJWZCmSHSZD\"                              \n [9] \"LhqLcVzshTNjhqhcjLLTLjbTnGndfdwrfPRVRrdnwftQwJRv\"\n[10] \"wHlPJZwbbZfqbFwqFZfrrcrJrtMWSMMVtVcJht\"          \n[11] \"NzzzNBjNfLzvGfDNjMhVhrrMShLchsRVLs\"              \n[12] \"DDdmmgBGDNdgfgZggnZbZHln\"                        \n[13] \"jqNjZJqsGsRqJJqnlJJGzMzffcffTCfQcFmvcWfvTNfcvv\"  \n[14] \"PdhVdrwphhVtDdSPLmFCWTLFWWTfFQQr\"                \n[15] \"dSPwbbVdbpQllZMQbMjM\"                            \n[16] \"QQdfflqvjTvfZqLMWfNDGhwsCNGGGM\"                  \n[17] \"rzRRRTVTPTNhsDWDRhGC\"                            \n[18] \"gHSTpTnppvjQgJjcql\"                              \n[19] \"nzNvsFBBBFsNrnNBrvndfThwDbhVPzVVwhZZChpZPCbZ\"    \n[20] \"GMQQStmcHHmlfMtPwbZVVVVhhPhbVc\""
  },
  {
    "objectID": "2022/qmd/2022-day03.html#data",
    "href": "2022/qmd/2022-day03.html#data",
    "title": "2022 - day 03",
    "section": "",
    "text": "Load and preview the data set.\n\ny = \"2022\"\nd = \"03\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\nhead(txt, n = 20L)\n\n [1] \"PnJJfVPBcfVnnPnBFFcggttrtgCrjDtSjzSS\"            \n [2] \"llWlLbmmdLLwLbqGdmTmbZfCQtzrMQfrjSzrtSrMqgMt\"    \n [3] \"sHlZTsWZwGGlZmGTmdlZbhJNRPphVfRvVnRBsRsJJV\"      \n [4] \"fsHtVbjtqstBghhwwPBw\"                            \n [5] \"SDQzzSzQrQMmmQlmlcNcJLZPgLrVZTdCddhgdPwwCw\"      \n [6] \"JmSWSVGGlJJbRsbpWHfbRj\"                          \n [7] \"tJndRtwtddPvllvfrldrfPpHWDgglFDWWmMmHWmHpZlS\"    \n [8] \"BBJTTjCsJWZCmSHSZD\"                              \n [9] \"LhqLcVzshTNjhqhcjLLTLjbTnGndfdwrfPRVRrdnwftQwJRv\"\n[10] \"wHlPJZwbbZfqbFwqFZfrrcrJrtMWSMMVtVcJht\"          \n[11] \"NzzzNBjNfLzvGfDNjMhVhrrMShLchsRVLs\"              \n[12] \"DDdmmgBGDNdgfgZggnZbZHln\"                        \n[13] \"jqNjZJqsGsRqJJqnlJJGzMzffcffTCfQcFmvcWfvTNfcvv\"  \n[14] \"PdhVdrwphhVtDdSPLmFCWTLFWWTfFQQr\"                \n[15] \"dSPwbbVdbpQllZMQbMjM\"                            \n[16] \"QQdfflqvjTvfZqLMWfNDGhwsCNGGGM\"                  \n[17] \"rzRRRTVTPTNhsDWDRhGC\"                            \n[18] \"gHSTpTnppvjQgJjcql\"                              \n[19] \"nzNvsFBBBFsNrnNBrvndfThwDbhVPzVVwhZZChpZPCbZ\"    \n[20] \"GMQQStmcHHmlfMtPwbZVVVVhhPhbVc\""
  },
  {
    "objectID": "2022/qmd/2022-day03.html#part-i",
    "href": "2022/qmd/2022-day03.html#part-i",
    "title": "2022 - day 03",
    "section": "Part I",
    "text": "Part I\nFind items (letters) occuring in the first and second half of a string, rank by position in the alphabet (1-26 for lowercase letters, 27-52 for uppercase letters) and calculate the sum.\n\nRPython\n\n\nApproach:\n\nsplit strings into first (c1) and second half (c2)\nsplit each half into single letters\nintersect first and half pairwise\nmatch with alphabet and calculate sum\n\n\nlen = nchar(txt) \n\nc1 = substr(txt, start = 1L, stop = len / 2L)\nc2 = substr(txt, start = len / 2L + 1L, stop = len)\n\nc1 = strsplit(c1, split = \"\")\nc2 = strsplit(c2, split = \"\")\n\nitems = Map(\n  intersect\n  , x = c1\n  , y = c2\n) |&gt; \n  unlist() \n\nscore = match(\n  items\n  , table = c(letters, LETTERS)\n)\n\nsum(score)\n\n[1] 7875\n\n\n\n\nApproach:\n\nsplit strings into first (c1) and second half (c2)\nintersect first and half pairwise\nget unicode code point for uppercase and lowercase letters, use a different offset to get correct scores\ncalculate sum\n\n\nc1 = [i[:int(len(i)/2)] for i in r.txt]\nc2 = [i[int(len(i)/2):] for i in r.txt]\n\nitems = []\nfor i1, i2 in zip(c1, c2):\n  i = set(i1) & set(i2)\n  items.append(list(i)[0])\n\nl = [ord(i) - 96 for i in items if i.islower()]\nu = [ord(i) - 65 + 27 for i in items if i.isupper()]\nsum(l + u)\n\n7875"
  },
  {
    "objectID": "2022/qmd/2022-day03.html#part-ii",
    "href": "2022/qmd/2022-day03.html#part-ii",
    "title": "2022 - day 03",
    "section": "Part II",
    "text": "Part II\n\nRPython\n\n\nApproach:\n\narrange rucksacks in groups of 3\nper group, unify items per rucksack and then calculate group frequency\nidentify item with frequency of 3\nmatch with alphabet and calculate sum\n\n\nfrom = seq.int(1L, to = length(txt), by = 3L)\nto = seq.int(3L, to = length(txt), by = 3L)\n\ngrp = mapply(\n  \\(f, t) txt[f:t]\n  , f = from\n  , t = to\n  , SIMPLIFY = FALSE\n)\n\nstick = lapply(\n  grp\n  , FUN = \\(g){\n    s = strsplit(g, split = \"\") |&gt; \n      lapply(FUN = unique) |&gt; \n      unlist() |&gt; \n      table()\n    names(s)[which(s == 3)]\n  }\n) |&gt; \n  unlist()\n\nscore = match(\n  stick\n  , table = c(letters, LETTERS)\n)\n\nsum(score)\n\n[1] 2479\n\n\n\n\nApproach:"
  },
  {
    "objectID": "2022/qmd/2022-day01.html",
    "href": "2022/qmd/2022-day01.html",
    "title": "2022 - day 01",
    "section": "",
    "text": "Load and preview the data set.\n\ny = \"2022\"\nd = \"01\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\nhead(txt, n = 30L)\n\n [1] \"4456\"  \"15332\" \"15148\" \"8795\"  \"11382\" \"\"      \"9808\"  \"8430\"  \"8486\" \n[10] \"18918\" \"\"      \"57935\" \"\"      \"1604\"  \"3015\"  \"4529\"  \"4862\"  \"1822\" \n[19] \"4297\"  \"2568\"  \"3263\"  \"3011\"  \"2127\"  \"5186\"  \"1947\"  \"5816\"  \"4255\" \n[28] \"4041\"  \"\"      \"35216\""
  },
  {
    "objectID": "2022/qmd/2022-day01.html#data",
    "href": "2022/qmd/2022-day01.html#data",
    "title": "2022 - day 01",
    "section": "",
    "text": "Load and preview the data set.\n\ny = \"2022\"\nd = \"01\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\nhead(txt, n = 30L)\n\n [1] \"4456\"  \"15332\" \"15148\" \"8795\"  \"11382\" \"\"      \"9808\"  \"8430\"  \"8486\" \n[10] \"18918\" \"\"      \"57935\" \"\"      \"1604\"  \"3015\"  \"4529\"  \"4862\"  \"1822\" \n[19] \"4297\"  \"2568\"  \"3263\"  \"3011\"  \"2127\"  \"5186\"  \"1947\"  \"5816\"  \"4255\" \n[28] \"4041\"  \"\"      \"35216\""
  },
  {
    "objectID": "2022/qmd/2022-day01.html#part-i",
    "href": "2022/qmd/2022-day01.html#part-i",
    "title": "2022 - day 01",
    "section": "Part I",
    "text": "Part I\nAggregate the calories per elf and get the maximum number of calories per elf.\n\nRPython\n\n\nApproach:\n\ncreate a vector of indices for the empty string\ncreate vector of start and end indices of each elf\ncreate list cal with subsets per elf\nconvert all strings per element of cal to integer and sum up\nget the maximum\n\n\nempty = which(txt == \"\")\nfrom = c(1L, empty + 1L)\nto = c(empty - 1L, length(txt))\n\ncal = mapply(\n  \\(f, t) txt[f:t]\n  , f = from\n  , t = to\n) |&gt; \n  lapply(as.integer) |&gt; \n  lapply(sum) |&gt; \n  unlist() \n\nmax(cal)\n\n[1] 72478\n\n\n\n\nApproach:\n\ncreate an empty list elf\ncreate an integer cal which defaults to 0\nloop over the string list\n\nif \\(i\\)th element is not an empty string, add the value to cal\nif \\(i\\)th element is an empty string, append cal to elf and reset cal\n\nget the maximum of the result\n\n\ntxt = r.txt\n\nelf = []\ncal = 0\n\nfor i in range(len(txt)):\n  if txt[i] != '':\n    cal = cal + int(txt[i])\n  else:\n    elf.append(cal)\n    cal = 0\n\nmax(elf)\n\n72478"
  },
  {
    "objectID": "2022/qmd/2022-day01.html#part-ii",
    "href": "2022/qmd/2022-day01.html#part-ii",
    "title": "2022 - day 01",
    "section": "Part II",
    "text": "Part II\n\nRPython\n\n\nApproach:\n\nsort vector cal in decreasing order\nselect first three elements and sum up\n\n\ncal = cal[order(cal, decreasing = TRUE)]\nsum(cal[1:3])\n\n[1] 210367\n\n\n\n\n\nelf.sort(reverse = True)\nsum(elf[0:3])\n\n210367"
  },
  {
    "objectID": "2022/qmd/2022-day02.html",
    "href": "2022/qmd/2022-day02.html",
    "title": "2022 - day 02",
    "section": "",
    "text": "Load and preview the data set.\n\ny = \"2022\"\nd = \"02\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\nhead(txt, n = 30L)\n\n [1] \"C Z\" \"A Y\" \"C Z\" \"A Y\" \"C Y\" \"A Z\" \"B Y\" \"C X\" \"A Y\" \"B X\" \"B X\" \"A Y\"\n[13] \"C Z\" \"C Y\" \"C Y\" \"A Y\" \"C Y\" \"B X\" \"B X\" \"A Z\" \"C Y\" \"B Z\" \"C Z\" \"A Z\"\n[25] \"B Y\" \"A Y\" \"C Z\" \"A Z\" \"A Y\" \"C Z\""
  },
  {
    "objectID": "2022/qmd/2022-day02.html#data",
    "href": "2022/qmd/2022-day02.html#data",
    "title": "2022 - day 02",
    "section": "",
    "text": "Load and preview the data set.\n\ny = \"2022\"\nd = \"02\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\nhead(txt, n = 30L)\n\n [1] \"C Z\" \"A Y\" \"C Z\" \"A Y\" \"C Y\" \"A Z\" \"B Y\" \"C X\" \"A Y\" \"B X\" \"B X\" \"A Y\"\n[13] \"C Z\" \"C Y\" \"C Y\" \"A Y\" \"C Y\" \"B X\" \"B X\" \"A Z\" \"C Y\" \"B Z\" \"C Z\" \"A Z\"\n[25] \"B Y\" \"A Y\" \"C Z\" \"A Z\" \"A Y\" \"C Z\""
  },
  {
    "objectID": "2022/qmd/2022-day02.html#part-i",
    "href": "2022/qmd/2022-day02.html#part-i",
    "title": "2022 - day 02",
    "section": "Part I",
    "text": "Part I\nGet the score of the rock paper scissors game.\n\nA = rock, B = paper, C = scissors\nX = rock, Y = paper, Z = scissors\n\n\nRPython\n\n\nApproach:\n\ndefine a named vector pts with all possible combinations and the resulting score\nmatch txt with pts to get the score for all games and sum up\n\n\npts = c(\n  \"A X\" = 1 + 3\n  , \"A Y\" = 2 + 6\n  , \"A Z\" = 3 + 0\n  , \"B X\" = 1 + 0\n  , \"B Y\" = 2 + 3\n  , \"B Z\" = 3 + 6\n  , \"C X\" = 1 + 6\n  , \"C Y\" = 2 + 0\n  , \"C Z\" = 3 + 3\n)\n\nscore = pts[match(txt, table = names(pts))]\nsum(score)\n\n[1] 12586\n\n\n\n\nApproach:\n\ndefine dictionary pts with all possible combinations and the resulting score\nuse list comprehension to get the score per game and sum up\n\n\ntxt = r.txt\n\npts = {\n  'A X': 1 + 3\n  , 'A Y': 2 + 6\n  , 'A Z': 3 + 0\n  , 'B X': 1 + 0\n  , 'B Y': 2 + 3\n  , 'B Z': 3 + 6\n  , 'C X': 1 + 6\n  , 'C Y': 2 + 0\n  , 'C Z': 3 + 3\n}\n\nscore = [pts[i] for i in txt]\nsum(score)\n\n12586"
  },
  {
    "objectID": "2022/qmd/2022-day02.html#part-ii",
    "href": "2022/qmd/2022-day02.html#part-ii",
    "title": "2022 - day 02",
    "section": "Part II",
    "text": "Part II\nGet the score of the rock paper scissors game.\n\nA = rock, B = paper, C = scissors\nX = loose, Y = draw, Z = win\n\n\nRPython\n\n\nApproach:\n\nsame as in part I, just re-define vector pts\n\n\npts = c(\n  \"A X\" = 3 + 0\n  , \"A Y\" = 1 + 3\n  , \"A Z\" = 2 + 6\n  , \"B X\" = 1 + 0\n  , \"B Y\" = 2 + 3\n  , \"B Z\" = 3 + 6\n  , \"C X\" = 2 + 0\n  , \"C Y\" = 3 + 3\n  , \"C Z\" = 1 + 6\n)\n\nscore = pts[match(txt, table = names(pts))]\nsum(score)\n\n[1] 13193\n\n\n\n\nApproach:\n\nsame as in part I, just re-define dictionary pts\n\n\ntxt = r.txt\n\npts = {\n  'A X': 3 + 0\n  , 'A Y': 1 + 3\n  , 'A Z': 2 + 6\n  , 'B X': 1 + 0\n  , 'B Y': 2 + 3\n  , 'B Z': 3 + 6\n  , 'C X': 2 + 0\n  , 'C Y': 3 + 3\n  , 'C Z': 1 + 6\n}\n\nscore = [pts[i] for i in txt]\nsum(score)\n\n13193"
  },
  {
    "objectID": "2023/qmd/2023-day01.html",
    "href": "2023/qmd/2023-day01.html",
    "title": "Day 01",
    "section": "",
    "text": "Load and preview the data set.\n\ny = \"2023\"\nd = \"01\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\n\nhead(txt, n = 12L)\n\n [1] \"nine92jnhgqzctpgbcbpz\"             \"sevensddvc73three\"                \n [3] \"9986fmfqhdmq8\"                     \"7onexmxbzllfqb\"                   \n [5] \"six777\"                            \"1zbngsixxrfrpr\"                   \n [7] \"threeeight9seven\"                  \"nhds975three6\"                    \n [9] \"ninepgp9\"                          \"22fourninetzfourfsnxjglthreeeight\"\n[11] \"mhcvqmsg7bdj\"                      \"seven67\""
  },
  {
    "objectID": "2023/qmd/2023-day01.html#data",
    "href": "2023/qmd/2023-day01.html#data",
    "title": "Day 01",
    "section": "",
    "text": "Load and preview the data set.\n\ny = \"2023\"\nd = \"01\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\n\nhead(txt, n = 12L)\n\n [1] \"nine92jnhgqzctpgbcbpz\"             \"sevensddvc73three\"                \n [3] \"9986fmfqhdmq8\"                     \"7onexmxbzllfqb\"                   \n [5] \"six777\"                            \"1zbngsixxrfrpr\"                   \n [7] \"threeeight9seven\"                  \"nhds975three6\"                    \n [9] \"ninepgp9\"                          \"22fourninetzfourfsnxjglthreeeight\"\n[11] \"mhcvqmsg7bdj\"                      \"seven67\""
  },
  {
    "objectID": "2023/qmd/2023-day01.html#part-i",
    "href": "2023/qmd/2023-day01.html#part-i",
    "title": "Day 01",
    "section": "Part I",
    "text": "Part I\nFor each element in the given vector of characters do:\n\nextract the first and the last digit\nconcatenate to a new number\ncalculate the sum\n\n\nRPython\n\n\nApproach:\n\nget indices of all digits per element using gregexpr\nget the first and last digit using range\nextract the first and last digits using substtr\ncreate the new number and calculate the sum\n\n\nl = gregexpr(\"[[:digit:]]\", text = txt) |&gt; \n  lapply(FUN = range) \n\nmapply(\n  \\(t, f){\n    paste0(\n      substr(t, f[1], f[1])\n      , substr(t, f[2], f[2])\n    ) |&gt; \n      as.numeric()\n  }\n  , t = txt\n  , f = l\n  , SIMPLIFY = FALSE\n) |&gt; \n  unname() |&gt; \n  unlist() |&gt; \n  sum(na.rm = TRUE)\n\n[1] 54601\n\n\n\n\nApproach:\n\nextract all digits from a string using list comprehension\nget the first and last digit by index and concatenate\ncalculate the sum\n\n\ndef getdigits(x: str):\n  digit = [i for i in x if i.isdigit()]\n  digit = digit[0] + digit[-1]\n  return int(digit)\n\nsum([getdigits(i) for i in r.txt])\n\n54601"
  },
  {
    "objectID": "2023/qmd/2023-day01.html#part-ii",
    "href": "2023/qmd/2023-day01.html#part-ii",
    "title": "Day 01",
    "section": "Part II",
    "text": "Part II\nThe task is the same as in part I, but in addition to digits, also written numbers (one, two, three, …) shall be considered.\n\nRPython\n\n\nApproach:\n\nreplace the second character of any written numbers with their digit (e.g.  one -&gt; o1e, two -&gt; t2o, …)\nreplacing the entire string would cause issues in case of adjacent written numbers like oneight, sevenine\napply the approach from part I\n\n\nfromto = c(\n  'one' = 'o1e'\n  , 'two' = 't2o'\n  , 'three' = 't3ree'\n  , 'four' = 'f4ur'\n  , 'five' = 'f5ve'\n  , 'six' = 's6x'\n  , 'seven' = 's7ven'\n  , 'eight' = 'e8ght'\n  , 'nine' = 'n9ne'\n)\n\ntxt_digits = Map(\n  stringi::stri_replace_all_fixed\n  , str = txt\n  , pattern = list(names(fromto))\n  , replacement = list(fromto)\n  , vectorize_all = FALSE\n) |&gt; \n  unlist() |&gt; \n  unname()\n\nl = gregexpr(\"[[:digit:]]\", text = txt_digits) |&gt; \n  lapply(FUN = range) \n\nmapply(\n  \\(t, f){\n    paste0(\n      substr(t, f[1], f[1])\n      , substr(t, f[2], f[2])\n    ) |&gt; \n      as.numeric()\n  }\n  , t = txt_digits\n  , f = l\n  , SIMPLIFY = FALSE\n) |&gt; \n  unname() |&gt; \n  unlist() |&gt; \n  sum(na.rm = TRUE)\n\n[1] 54078\n\n\n\n\n\nfromto = {\n  'one': 'o1e'\n  , 'two': 't2o'\n  , 'three': 't3ree'\n  , 'four': 'f4ur'\n  , 'five': 'f5ve'\n  , 'six': 's6x'\n  , 'seven': 's7ven'\n  , 'eight': 'e8ght'\n  , 'nine': 'n9ne'\n}\n\ndef digitstring2digit(x: str, dic: dict):\n  for i, k in enumerate(dic):\n    x = x.replace(k, dic[k])\n  return x\n\ntxt_digits = [digitstring2digit(i, fromto) for i in r.txt]    \n\nsum([getdigits(i) for i in txt_digits])\n\n54078"
  },
  {
    "objectID": "2023/qmd/2023-day03.html",
    "href": "2023/qmd/2023-day03.html",
    "title": "Day 03",
    "section": "",
    "text": "Load and preview the data set.\n\ny = \"2023\"\nd = \"03\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\nhead(txt)\n\n[1] \"311...672...34...391.....591......828.......................738....................223....803..472..................................714.840.\"\n[2] \".......*...........*.....*...........*........631%...703.......*..12....652.................*.$............368.769*148.................*....\"\n[3] \"....411...........2....837.121........511.745...........*.48.422.@.........@.............311........887......*................457........595\"\n[4] \"........*328...............&..........................144.*...................138............48.......*......682.........@...*.......777....\"\n[5] \".....144.....+........170...................207............813..../.&....139..*.....346........*..147..143.+.....78....536..79........*.....\"\n[6] \"...........828...559.................181...%..........613.......10...928...*...993.+.........758.*.........471...#../...............573.....\""
  },
  {
    "objectID": "2023/qmd/2023-day03.html#data",
    "href": "2023/qmd/2023-day03.html#data",
    "title": "Day 03",
    "section": "",
    "text": "Load and preview the data set.\n\ny = \"2023\"\nd = \"03\"\n\nifl = file.path(\n  here::here()\n  , y\n  , \"data\"\n  , paste0(y, \"-day\", d, \"input\")\n)\n\ntxt = readLines(ifl)\nhead(txt)\n\n[1] \"311...672...34...391.....591......828.......................738....................223....803..472..................................714.840.\"\n[2] \".......*...........*.....*...........*........631%...703.......*..12....652.................*.$............368.769*148.................*....\"\n[3] \"....411...........2....837.121........511.745...........*.48.422.@.........@.............311........887......*................457........595\"\n[4] \"........*328...............&..........................144.*...................138............48.......*......682.........@...*.......777....\"\n[5] \".....144.....+........170...................207............813..../.&....139..*.....346........*..147..143.+.....78....536..79........*.....\"\n[6] \"...........828...559.................181...%..........613.......10...928...*...993.+.........758.*.........471...#../...............573.....\""
  },
  {
    "objectID": "2023/qmd/2023-day03.html#part-i",
    "href": "2023/qmd/2023-day03.html#part-i",
    "title": "Day 03",
    "section": "Part I",
    "text": "Part I\nSum up numbers next to a symbol.\n\nRPython\n\n\n\ndig = gsub(\"[^[:digit:]]\", replacement = \".\", x = txt)\nsym = gsub(\"[[:digit:]]\", replacement = \".\", x = txt)\nsym = gsub(\"[^\\\\.]\", replacement = \"*\", x = sym) \n\nhead(dig)\nhead(sym)\n\nfor (i in seq_along(sym)){\n  for (j in 1:nchar(sym[1])){\n    i = 2\n    j = 1\n    idx = gregexpr(\"\\\\*\", text = sym[i])[[1]]\n    idx = as.integer(idx)\n    idx = c(idx -1L, idx, idx + 1L)\n    \n    sub = strsplit(dig[i], \"\")[[1]]\n    sub[idx] = gsub(\"\\\\.\", \"*\", sub[idx])\n    \n    if (i &gt; 1) {\n      sub = strsplit(dig[i-1L], \"\")[[1]]\n      sub[idx] = gsub(\"\\\\.\", \"*\", sub[idx])\n    }\n    \n    for (k in -1:1){\n      \n    }\n  }\n}\n\ngregexpr(\"[[:digit:]]\", dig[1:2])\ngregexpr(\"[^\\\\.]\", sym[1:2])\n\nm = Map(\n  strsplit\n  , x = dig\n  , split =\"\"\n) |&gt; \n  lapply(FUN = \"[[\", 1) |&gt; \n  lapply(FUN = as.integer) |&gt; \n  unname() |&gt; \n  unlist() |&gt; \n  matrix(ncol = 140, byrow = T)\n\nm[1,]\ndig[1]\n\nidx = gregexec(\"\\\\*\", sym) |&gt; \n  lapply(FUN = as.numeric)\n\nm = matrix(\n  rep(0L, times = length(sym) * nchar(sym[1]))\n  , nrow = length(sym)\n)\n\nregexec(\"\\\\*\", text = sym[2])\ngregexec(\"\\\\*\", text = sym[2])\n\nlapply(\n  sym\n  seq_along(sym)\n  , FUN = \\(i){\n    m[i, grep(\"*\", x = sym[i])] = 1L\n  }\n)"
  },
  {
    "objectID": "2023/qmd/2023-day03.html#part-ii",
    "href": "2023/qmd/2023-day03.html#part-ii",
    "title": "Day 03",
    "section": "Part II",
    "text": "Part II\n\nRPython"
  },
  {
    "objectID": "2023/qmd/2023-day07.html",
    "href": "2023/qmd/2023-day07.html",
    "title": "2023 - day 07",
    "section": "",
    "text": "Part IPart II\n\n\nRank hands of cards and get the total winnings (bid * rank).\n\nhead(txt, n = 12L)\n\n [1] \"9A35J 469\" \"75T32 237\" \"6T8JQ 427\" \"3366A 814\" \"K2AK9 982\" \"J8KTT 9\"  \n [7] \"94936 970\" \"Q8AK9 15\"  \"3QQ32 940\" \"65555 484\" \"8K88K 674\" \"Q67T5 788\"\n\n\n\nRPython\n\n\n\ntypes = c(\n  \"11111\" = \"1_highcard\"\n  , \"1112\" = \"2_onepair\"\n  , \"122\" = \"3_twopair\"\n  , \"113\" = \"4_threeofakind\"\n  , \"23\" = \"5_fullhouse\"\n  , \"14\" = \"6_fourofakind\"\n  , \"5\" = \"7_fiveofakind\"\n)\n\nvalues = c(\n  \"A\" = 14\n  , \"K\" = 13\n  , \"Q\" = 12\n  , \"J\" = 11\n  , \"T\" = 10\n  , \"9\" = 9\n  , \"8\" = 8\n  , \"7\" = 7\n  , \"6\" = 6\n  , \"5\" = 5\n  , \"4\" = 4\n  , \"3\" = 3\n  , \"2\" = 2\n)\n\nhandtable = function(x){\n  table(x) |&gt; \n    sort() |&gt; \n    paste(collapse = \"\")\n}\n\nhandtype = function(x, typ = types){\n  \n  h = strsplit(x, split = \"\")\n  h = Map(\n    handtable\n    , x = h\n  ) |&gt; \n    unlist()\n  \n  typ[\n    match(\n      h\n      , table = names(typ)\n    )\n  ] |&gt; \n    unname()\n  \n}\n\nsecondorder = function(x, val = values){\n  \n  h = strsplit(x, split = \"\")\n  h = lapply(\n    h\n    , FUN = \\(i) {\n      unname(\n        val[\n          match(\n            i\n            , table = names(val)\n          )\n        ]\n      )\n    }\n  )\n  \n  lapply(\n    h\n    , FUN = \\(i) {\n      as.numeric(\n        (i / 10) %*% c(100000000, 1000000, 10000, 100, 1)\n      )\n    }\n  ) |&gt; \n    unlist()\n  \n}\n\ndata = data.table(\n  txt = txt\n)\n\ndata[, hand := tstrsplit(txt, split = \" \", keep = 1L)]\ndata[, score := tstrsplit(txt, split = \" \", keep = 2L)]\ndata[, score := as.integer(score)]\ndata[, type := handtype(hand)]\ndata[, sorder := secondorder(hand)]\n\nsetorder(data, type, sorder)\n\ndata[, rank := .I]\ndata[, bid := rank * score]\nsum(data$bid)\n\n[1] 250120186\n\n\n\n\n\n\n\n\n\n\n\nhead(txt, n = 12L)\n\n [1] \"9A35J 469\" \"75T32 237\" \"6T8JQ 427\" \"3366A 814\" \"K2AK9 982\" \"J8KTT 9\"  \n [7] \"94936 970\" \"Q8AK9 15\"  \"3QQ32 940\" \"65555 484\" \"8K88K 674\" \"Q67T5 788\"\n\n\n\nRPython"
  },
  {
    "objectID": "2023/qmd/2023-day16.html",
    "href": "2023/qmd/2023-day16.html",
    "title": "2023 - day 16",
    "section": "",
    "text": "head(txt)\n\n[1] \"\\\\........-.........\\\\................................|..................-.............\\\\../......-..............\" \n[2] \"........|....\\\\.../...-...............\\\\.........\\\\...........-......-.......\\\\...../.....................-.../...\"\n[3] \".......--.......|.-..-..........................\\\\....../..../........-............/.........|........|........\"   \n[4] \".................................../.........................|....|.....\\\\............./..........|...../..\\\\\\\\..\" \n[5] \".........\\\\................|..../.........................................-......|........................|....\"   \n[6] \".|............-....|.....-.....|...............-.............-....................................\\\\...........\"   \n\n\n\nPart IPart II\n\n\nDetermine number of energized cells.\n\nRPython\n\n\n\n# txt |&gt; sapply(nchar) |&gt; unname()\n# gsub(\"\\\\\\\\\", \"%%\", x = txt) |&gt; sapply(nchar) |&gt; unname()\n\ngetcell = function(\n    row\n    , col\n    , lines = txt\n){\n  \n  if (!(row %in% 1:length(txt) & col %in% 1:nchar(lines[1]))){\n    s = NA_character_\n  } else {\n    s = substr(lines[row], start = col, stop = col)\n  }\n  \n  return(s)\n  \n}\n\ngetcell(0, 1)\ngetcell(5, 1120)\ngetcell(1, 1)\ngetcell(1, 2)\ngetcell(1, 10)\n\n\nnextcells = function(\n    x\n    , y\n    , from = c(\"l\", \"r\", \"t\", \"b\")\n){\n  \n  from = match.arg(from)\n  type = getcell(x, col = y)\n  \n  if (type == \".\"){\n    if (from == \"l\") n = c(x, y + 1L)\n    else if (from == \"r\") n = c(x, y - 1L)\n    else if (from == \"t\") n = c(x + 1L, y)\n    else if (from == \"b\") n = c(x - 1L, y)\n  } else if (type == \"/\"){\n    if (from == \"l\") n = c(x - 1L, y)\n    else if (from == \"r\") n = c(x + 1L, y)\n    else if (from == \"t\") n = c(x, y - 1L)\n    else if (from == \"b\") n = c(x, y + 1L)\n  } else if (type == \"\\\\\"){\n    if (from == \"l\") n = c(x + 1L, y)\n    else if (from == \"r\") n = c(x - 1L, y)\n    else if (from == \"t\") n = c(x, y + 1L)\n    else if (from == \"b\") n = c(x, y - 1L)\n  } else if (type == \"-\"){\n    if (from == \"l\") n = c(x, y + 1L)\n    else if (from == \"r\") n = c(x, y - 1L)\n    else if (from == \"t\") n = c(x, y + 1L, x, y - 1L)\n    else if (from == \"b\") n = c(x, y + 1L, x, y - 1L)\n  } else if (type == \"|\"){\n    if (from == \"l\") n = c(x + 1L, y, x - 1L, y)\n    else if (from == \"r\") n = c(x + 1L, y, x - 1L, y)\n    else if (from == \"t\") n = c(x + 1L, y)\n    else if (from == \"b\") n = c(x - 1L, y)\n  }\n  \n  n = matrix(n, ncol = 2L, byrow = TRUE)\n  \n  idx = apply(\n    n\n    , MARGIN = 2L\n    , FUN = \\(i) which(i == 0)\n  ) |&gt; \n    unlist()\n  \n  if (length(idx) &gt; 0L) n = n[-idx, , drop = FALSE]\n  return(n)\n  \n}\n\nm = matrix(nrow = 0L, ncol = 2L)\ncolnames(m) = c(\"row\", \"col\")\n\nn = matrix(c(1L, 1L), ncol = 2L, byrow = TRUE)\ncolnames(n) = c(\"row\", \"col\")\n\nwhile (dim(n)[1] &gt; 0L){\n  \n  m = rbind(m, n)\n  \n  for (i in 1:dim(n)[1]){\n    n = nextcells(n[i, ])\n  }\n  \n}\nrbind(\n  m\n  , nextcells(m[])\n)\n\ntxt[1]\nx = 1\ny = 10\nfrom = \"r\"\ngetcell(x, y)\n\nnextcells(1, y = 1, from = \"l\")\nnextcells(1, y = 1, from = \"r\")\nnextcells(1, y = 10, from = \"l\")\nnextcells(1, y = 10, from = \"r\")\nnextcells(1, y = 10, from = \"b\")\nnextcells(1, y = 53, from = \"r\")\nnextcells(1, y = 53, from = \"t\")\nnextcells(1, y = 53, from = \"b\")\nnextcells(1, y = 53, from = \"l\")\n\n\n\n\n\n\n\n\n\nAdd \\(m\\) successive cards where \\(m\\) is the number of matches in a card. Get the final number of cards.\n\nRPython"
  }
]